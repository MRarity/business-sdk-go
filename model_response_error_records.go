/*
Snap Conversions API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package businesssdk

import (
	"encoding/json"
)

// ResponseErrorRecords struct for ResponseErrorRecords
type ResponseErrorRecords struct {
	Reason *string `json:"reason,omitempty"`
	RecordIndexes []int32 `json:"record_indexes,omitempty"`
}

// NewResponseErrorRecords instantiates a new ResponseErrorRecords object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponseErrorRecords() *ResponseErrorRecords {
	this := ResponseErrorRecords{}
	return &this
}

// NewResponseErrorRecordsWithDefaults instantiates a new ResponseErrorRecords object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponseErrorRecordsWithDefaults() *ResponseErrorRecords {
	this := ResponseErrorRecords{}
	return &this
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *ResponseErrorRecords) GetReason() string {
	if o == nil || o.Reason == nil {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseErrorRecords) GetReasonOk() (*string, bool) {
	if o == nil || o.Reason == nil {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *ResponseErrorRecords) HasReason() bool {
	if o != nil && o.Reason != nil {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *ResponseErrorRecords) SetReason(v string) {
	o.Reason = &v
}

// GetRecordIndexes returns the RecordIndexes field value if set, zero value otherwise.
func (o *ResponseErrorRecords) GetRecordIndexes() []int32 {
	if o == nil || o.RecordIndexes == nil {
		var ret []int32
		return ret
	}
	return o.RecordIndexes
}

// GetRecordIndexesOk returns a tuple with the RecordIndexes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseErrorRecords) GetRecordIndexesOk() ([]int32, bool) {
	if o == nil || o.RecordIndexes == nil {
		return nil, false
	}
	return o.RecordIndexes, true
}

// HasRecordIndexes returns a boolean if a field has been set.
func (o *ResponseErrorRecords) HasRecordIndexes() bool {
	if o != nil && o.RecordIndexes != nil {
		return true
	}

	return false
}

// SetRecordIndexes gets a reference to the given []int32 and assigns it to the RecordIndexes field.
func (o *ResponseErrorRecords) SetRecordIndexes(v []int32) {
	o.RecordIndexes = v
}

func (o ResponseErrorRecords) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Reason != nil {
		toSerialize["reason"] = o.Reason
	}
	if o.RecordIndexes != nil {
		toSerialize["record_indexes"] = o.RecordIndexes
	}
	return json.Marshal(toSerialize)
}

type NullableResponseErrorRecords struct {
	value *ResponseErrorRecords
	isSet bool
}

func (v NullableResponseErrorRecords) Get() *ResponseErrorRecords {
	return v.value
}

func (v *NullableResponseErrorRecords) Set(val *ResponseErrorRecords) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseErrorRecords) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseErrorRecords) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseErrorRecords(val *ResponseErrorRecords) *NullableResponseErrorRecords {
	return &NullableResponseErrorRecords{value: val, isSet: true}
}

func (v NullableResponseErrorRecords) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseErrorRecords) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


