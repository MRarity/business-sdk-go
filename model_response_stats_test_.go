/*
Snap Conversions API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package businesssdk

import (
	"encoding/json"
)

// ResponseStatsTest struct for ResponseStatsTest
type ResponseStatsTest struct {
	LatestEventTs *int64 `json:"latest_event_ts,omitempty"`
	EventCountPastHour *int64 `json:"event_count_past_hour,omitempty"`
}

// NewResponseStatsTest instantiates a new ResponseStatsTest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponseStatsTest() *ResponseStatsTest {
	this := ResponseStatsTest{}
	return &this
}

// NewResponseStatsTestWithDefaults instantiates a new ResponseStatsTest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponseStatsTestWithDefaults() *ResponseStatsTest {
	this := ResponseStatsTest{}
	return &this
}

// GetLatestEventTs returns the LatestEventTs field value if set, zero value otherwise.
func (o *ResponseStatsTest) GetLatestEventTs() int64 {
	if o == nil || o.LatestEventTs == nil {
		var ret int64
		return ret
	}
	return *o.LatestEventTs
}

// GetLatestEventTsOk returns a tuple with the LatestEventTs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseStatsTest) GetLatestEventTsOk() (*int64, bool) {
	if o == nil || o.LatestEventTs == nil {
		return nil, false
	}
	return o.LatestEventTs, true
}

// HasLatestEventTs returns a boolean if a field has been set.
func (o *ResponseStatsTest) HasLatestEventTs() bool {
	if o != nil && o.LatestEventTs != nil {
		return true
	}

	return false
}

// SetLatestEventTs gets a reference to the given int64 and assigns it to the LatestEventTs field.
func (o *ResponseStatsTest) SetLatestEventTs(v int64) {
	o.LatestEventTs = &v
}

// GetEventCountPastHour returns the EventCountPastHour field value if set, zero value otherwise.
func (o *ResponseStatsTest) GetEventCountPastHour() int64 {
	if o == nil || o.EventCountPastHour == nil {
		var ret int64
		return ret
	}
	return *o.EventCountPastHour
}

// GetEventCountPastHourOk returns a tuple with the EventCountPastHour field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseStatsTest) GetEventCountPastHourOk() (*int64, bool) {
	if o == nil || o.EventCountPastHour == nil {
		return nil, false
	}
	return o.EventCountPastHour, true
}

// HasEventCountPastHour returns a boolean if a field has been set.
func (o *ResponseStatsTest) HasEventCountPastHour() bool {
	if o != nil && o.EventCountPastHour != nil {
		return true
	}

	return false
}

// SetEventCountPastHour gets a reference to the given int64 and assigns it to the EventCountPastHour field.
func (o *ResponseStatsTest) SetEventCountPastHour(v int64) {
	o.EventCountPastHour = &v
}

func (o ResponseStatsTest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.LatestEventTs != nil {
		toSerialize["latest_event_ts"] = o.LatestEventTs
	}
	if o.EventCountPastHour != nil {
		toSerialize["event_count_past_hour"] = o.EventCountPastHour
	}
	return json.Marshal(toSerialize)
}

type NullableResponseStatsTest struct {
	value *ResponseStatsTest
	isSet bool
}

func (v NullableResponseStatsTest) Get() *ResponseStatsTest {
	return v.value
}

func (v *NullableResponseStatsTest) Set(val *ResponseStatsTest) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseStatsTest) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseStatsTest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseStatsTest(val *ResponseStatsTest) *NullableResponseStatsTest {
	return &NullableResponseStatsTest{value: val, isSet: true}
}

func (v NullableResponseStatsTest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseStatsTest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


