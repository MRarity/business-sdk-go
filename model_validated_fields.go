/*
Snap Conversions API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package businesssdk

import (
	"encoding/json"
)

// ValidatedFields struct for ValidatedFields
type ValidatedFields struct {
	ValidatedFields *ValidatedFieldsItems `json:"validated_fields,omitempty"`
	RecordIndex *int32 `json:"record_index,omitempty"`
}

// NewValidatedFields instantiates a new ValidatedFields object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValidatedFields() *ValidatedFields {
	this := ValidatedFields{}
	return &this
}

// NewValidatedFieldsWithDefaults instantiates a new ValidatedFields object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValidatedFieldsWithDefaults() *ValidatedFields {
	this := ValidatedFields{}
	return &this
}

// GetValidatedFields returns the ValidatedFields field value if set, zero value otherwise.
func (o *ValidatedFields) GetValidatedFields() ValidatedFieldsItems {
	if o == nil || o.ValidatedFields == nil {
		var ret ValidatedFieldsItems
		return ret
	}
	return *o.ValidatedFields
}

// GetValidatedFieldsOk returns a tuple with the ValidatedFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidatedFields) GetValidatedFieldsOk() (*ValidatedFieldsItems, bool) {
	if o == nil || o.ValidatedFields == nil {
		return nil, false
	}
	return o.ValidatedFields, true
}

// HasValidatedFields returns a boolean if a field has been set.
func (o *ValidatedFields) HasValidatedFields() bool {
	if o != nil && o.ValidatedFields != nil {
		return true
	}

	return false
}

// SetValidatedFields gets a reference to the given ValidatedFieldsItems and assigns it to the ValidatedFields field.
func (o *ValidatedFields) SetValidatedFields(v ValidatedFieldsItems) {
	o.ValidatedFields = &v
}

// GetRecordIndex returns the RecordIndex field value if set, zero value otherwise.
func (o *ValidatedFields) GetRecordIndex() int32 {
	if o == nil || o.RecordIndex == nil {
		var ret int32
		return ret
	}
	return *o.RecordIndex
}

// GetRecordIndexOk returns a tuple with the RecordIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidatedFields) GetRecordIndexOk() (*int32, bool) {
	if o == nil || o.RecordIndex == nil {
		return nil, false
	}
	return o.RecordIndex, true
}

// HasRecordIndex returns a boolean if a field has been set.
func (o *ValidatedFields) HasRecordIndex() bool {
	if o != nil && o.RecordIndex != nil {
		return true
	}

	return false
}

// SetRecordIndex gets a reference to the given int32 and assigns it to the RecordIndex field.
func (o *ValidatedFields) SetRecordIndex(v int32) {
	o.RecordIndex = &v
}

func (o ValidatedFields) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ValidatedFields != nil {
		toSerialize["validated_fields"] = o.ValidatedFields
	}
	if o.RecordIndex != nil {
		toSerialize["record_index"] = o.RecordIndex
	}
	return json.Marshal(toSerialize)
}

type NullableValidatedFields struct {
	value *ValidatedFields
	isSet bool
}

func (v NullableValidatedFields) Get() *ValidatedFields {
	return v.value
}

func (v *NullableValidatedFields) Set(val *ValidatedFields) {
	v.value = val
	v.isSet = true
}

func (v NullableValidatedFields) IsSet() bool {
	return v.isSet
}

func (v *NullableValidatedFields) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValidatedFields(val *ValidatedFields) *NullableValidatedFields {
	return &NullableValidatedFields{value: val, isSet: true}
}

func (v NullableValidatedFields) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValidatedFields) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


