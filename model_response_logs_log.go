/*
Snap Conversions API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package businesssdk

import (
	"encoding/json"
)

// ResponseLogsLog struct for ResponseLogsLog
type ResponseLogsLog struct {
	Timestamp *string `json:"timestamp,omitempty"`
	EventType *string `json:"event_type,omitempty"`
	EventConversionType *string `json:"event_conversion_type,omitempty"`
	Status *string `json:"status,omitempty"`
	Integration *string `json:"integration,omitempty"`
	EventMetadata *CapiEvent `json:"event_metadata,omitempty"`
	ErrorRecords []string `json:"error_records,omitempty"`
	WarningRecords []string `json:"warning_records,omitempty"`
}

// NewResponseLogsLog instantiates a new ResponseLogsLog object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponseLogsLog() *ResponseLogsLog {
	this := ResponseLogsLog{}
	return &this
}

// NewResponseLogsLogWithDefaults instantiates a new ResponseLogsLog object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponseLogsLogWithDefaults() *ResponseLogsLog {
	this := ResponseLogsLog{}
	return &this
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *ResponseLogsLog) GetTimestamp() string {
	if o == nil || o.Timestamp == nil {
		var ret string
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseLogsLog) GetTimestampOk() (*string, bool) {
	if o == nil || o.Timestamp == nil {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *ResponseLogsLog) HasTimestamp() bool {
	if o != nil && o.Timestamp != nil {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given string and assigns it to the Timestamp field.
func (o *ResponseLogsLog) SetTimestamp(v string) {
	o.Timestamp = &v
}

// GetEventType returns the EventType field value if set, zero value otherwise.
func (o *ResponseLogsLog) GetEventType() string {
	if o == nil || o.EventType == nil {
		var ret string
		return ret
	}
	return *o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseLogsLog) GetEventTypeOk() (*string, bool) {
	if o == nil || o.EventType == nil {
		return nil, false
	}
	return o.EventType, true
}

// HasEventType returns a boolean if a field has been set.
func (o *ResponseLogsLog) HasEventType() bool {
	if o != nil && o.EventType != nil {
		return true
	}

	return false
}

// SetEventType gets a reference to the given string and assigns it to the EventType field.
func (o *ResponseLogsLog) SetEventType(v string) {
	o.EventType = &v
}

// GetEventConversionType returns the EventConversionType field value if set, zero value otherwise.
func (o *ResponseLogsLog) GetEventConversionType() string {
	if o == nil || o.EventConversionType == nil {
		var ret string
		return ret
	}
	return *o.EventConversionType
}

// GetEventConversionTypeOk returns a tuple with the EventConversionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseLogsLog) GetEventConversionTypeOk() (*string, bool) {
	if o == nil || o.EventConversionType == nil {
		return nil, false
	}
	return o.EventConversionType, true
}

// HasEventConversionType returns a boolean if a field has been set.
func (o *ResponseLogsLog) HasEventConversionType() bool {
	if o != nil && o.EventConversionType != nil {
		return true
	}

	return false
}

// SetEventConversionType gets a reference to the given string and assigns it to the EventConversionType field.
func (o *ResponseLogsLog) SetEventConversionType(v string) {
	o.EventConversionType = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ResponseLogsLog) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseLogsLog) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ResponseLogsLog) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ResponseLogsLog) SetStatus(v string) {
	o.Status = &v
}

// GetIntegration returns the Integration field value if set, zero value otherwise.
func (o *ResponseLogsLog) GetIntegration() string {
	if o == nil || o.Integration == nil {
		var ret string
		return ret
	}
	return *o.Integration
}

// GetIntegrationOk returns a tuple with the Integration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseLogsLog) GetIntegrationOk() (*string, bool) {
	if o == nil || o.Integration == nil {
		return nil, false
	}
	return o.Integration, true
}

// HasIntegration returns a boolean if a field has been set.
func (o *ResponseLogsLog) HasIntegration() bool {
	if o != nil && o.Integration != nil {
		return true
	}

	return false
}

// SetIntegration gets a reference to the given string and assigns it to the Integration field.
func (o *ResponseLogsLog) SetIntegration(v string) {
	o.Integration = &v
}

// GetEventMetadata returns the EventMetadata field value if set, zero value otherwise.
func (o *ResponseLogsLog) GetEventMetadata() CapiEvent {
	if o == nil || o.EventMetadata == nil {
		var ret CapiEvent
		return ret
	}
	return *o.EventMetadata
}

// GetEventMetadataOk returns a tuple with the EventMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseLogsLog) GetEventMetadataOk() (*CapiEvent, bool) {
	if o == nil || o.EventMetadata == nil {
		return nil, false
	}
	return o.EventMetadata, true
}

// HasEventMetadata returns a boolean if a field has been set.
func (o *ResponseLogsLog) HasEventMetadata() bool {
	if o != nil && o.EventMetadata != nil {
		return true
	}

	return false
}

// SetEventMetadata gets a reference to the given CapiEvent and assigns it to the EventMetadata field.
func (o *ResponseLogsLog) SetEventMetadata(v CapiEvent) {
	o.EventMetadata = &v
}

// GetErrorRecords returns the ErrorRecords field value if set, zero value otherwise.
func (o *ResponseLogsLog) GetErrorRecords() []string {
	if o == nil || o.ErrorRecords == nil {
		var ret []string
		return ret
	}
	return o.ErrorRecords
}

// GetErrorRecordsOk returns a tuple with the ErrorRecords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseLogsLog) GetErrorRecordsOk() ([]string, bool) {
	if o == nil || o.ErrorRecords == nil {
		return nil, false
	}
	return o.ErrorRecords, true
}

// HasErrorRecords returns a boolean if a field has been set.
func (o *ResponseLogsLog) HasErrorRecords() bool {
	if o != nil && o.ErrorRecords != nil {
		return true
	}

	return false
}

// SetErrorRecords gets a reference to the given []string and assigns it to the ErrorRecords field.
func (o *ResponseLogsLog) SetErrorRecords(v []string) {
	o.ErrorRecords = v
}

// GetWarningRecords returns the WarningRecords field value if set, zero value otherwise.
func (o *ResponseLogsLog) GetWarningRecords() []string {
	if o == nil || o.WarningRecords == nil {
		var ret []string
		return ret
	}
	return o.WarningRecords
}

// GetWarningRecordsOk returns a tuple with the WarningRecords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseLogsLog) GetWarningRecordsOk() ([]string, bool) {
	if o == nil || o.WarningRecords == nil {
		return nil, false
	}
	return o.WarningRecords, true
}

// HasWarningRecords returns a boolean if a field has been set.
func (o *ResponseLogsLog) HasWarningRecords() bool {
	if o != nil && o.WarningRecords != nil {
		return true
	}

	return false
}

// SetWarningRecords gets a reference to the given []string and assigns it to the WarningRecords field.
func (o *ResponseLogsLog) SetWarningRecords(v []string) {
	o.WarningRecords = v
}

func (o ResponseLogsLog) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Timestamp != nil {
		toSerialize["timestamp"] = o.Timestamp
	}
	if o.EventType != nil {
		toSerialize["event_type"] = o.EventType
	}
	if o.EventConversionType != nil {
		toSerialize["event_conversion_type"] = o.EventConversionType
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.Integration != nil {
		toSerialize["integration"] = o.Integration
	}
	if o.EventMetadata != nil {
		toSerialize["event_metadata"] = o.EventMetadata
	}
	if o.ErrorRecords != nil {
		toSerialize["error_records"] = o.ErrorRecords
	}
	if o.WarningRecords != nil {
		toSerialize["warning_records"] = o.WarningRecords
	}
	return json.Marshal(toSerialize)
}

type NullableResponseLogsLog struct {
	value *ResponseLogsLog
	isSet bool
}

func (v NullableResponseLogsLog) Get() *ResponseLogsLog {
	return v.value
}

func (v *NullableResponseLogsLog) Set(val *ResponseLogsLog) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseLogsLog) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseLogsLog) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseLogsLog(val *ResponseLogsLog) *NullableResponseLogsLog {
	return &NullableResponseLogsLog{value: val, isSet: true}
}

func (v NullableResponseLogsLog) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseLogsLog) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


