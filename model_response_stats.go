/*
Snap Conversions API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package businesssdk

import (
	"encoding/json"
)

// ResponseStats struct for ResponseStats
type ResponseStats struct {
	Status *string `json:"status,omitempty"`
	Reason *string `json:"reason,omitempty"`
	Stats *ResponseStatsData `json:"stats,omitempty"`
}

// NewResponseStats instantiates a new ResponseStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponseStats() *ResponseStats {
	this := ResponseStats{}
	return &this
}

// NewResponseStatsWithDefaults instantiates a new ResponseStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponseStatsWithDefaults() *ResponseStats {
	this := ResponseStats{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ResponseStats) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseStats) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ResponseStats) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ResponseStats) SetStatus(v string) {
	o.Status = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *ResponseStats) GetReason() string {
	if o == nil || o.Reason == nil {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseStats) GetReasonOk() (*string, bool) {
	if o == nil || o.Reason == nil {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *ResponseStats) HasReason() bool {
	if o != nil && o.Reason != nil {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *ResponseStats) SetReason(v string) {
	o.Reason = &v
}

// GetStats returns the Stats field value if set, zero value otherwise.
func (o *ResponseStats) GetStats() ResponseStatsData {
	if o == nil || o.Stats == nil {
		var ret ResponseStatsData
		return ret
	}
	return *o.Stats
}

// GetStatsOk returns a tuple with the Stats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseStats) GetStatsOk() (*ResponseStatsData, bool) {
	if o == nil || o.Stats == nil {
		return nil, false
	}
	return o.Stats, true
}

// HasStats returns a boolean if a field has been set.
func (o *ResponseStats) HasStats() bool {
	if o != nil && o.Stats != nil {
		return true
	}

	return false
}

// SetStats gets a reference to the given ResponseStatsData and assigns it to the Stats field.
func (o *ResponseStats) SetStats(v ResponseStatsData) {
	o.Stats = &v
}

func (o ResponseStats) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.Reason != nil {
		toSerialize["reason"] = o.Reason
	}
	if o.Stats != nil {
		toSerialize["stats"] = o.Stats
	}
	return json.Marshal(toSerialize)
}

type NullableResponseStats struct {
	value *ResponseStats
	isSet bool
}

func (v NullableResponseStats) Get() *ResponseStats {
	return v.value
}

func (v *NullableResponseStats) Set(val *ResponseStats) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseStats) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseStats(val *ResponseStats) *NullableResponseStats {
	return &NullableResponseStats{value: val, isSet: true}
}

func (v NullableResponseStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


