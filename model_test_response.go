/*
Snap Conversions API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package businesssdk

import (
	"encoding/json"
)

// TestResponse struct for TestResponse
type TestResponse struct {
	Status *string `json:"status,omitempty"`
	Reason *string `json:"reason,omitempty"`
	ErrorRecords []ResponseErrorRecords `json:"error_records,omitempty"`
	WarningRecords []ResponseErrorRecords `json:"warning_records,omitempty"`
	ValidatedFields []ValidatedFields `json:"validated_fields,omitempty"`
}

// NewTestResponse instantiates a new TestResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestResponse() *TestResponse {
	this := TestResponse{}
	return &this
}

// NewTestResponseWithDefaults instantiates a new TestResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestResponseWithDefaults() *TestResponse {
	this := TestResponse{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *TestResponse) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestResponse) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *TestResponse) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *TestResponse) SetStatus(v string) {
	o.Status = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *TestResponse) GetReason() string {
	if o == nil || o.Reason == nil {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestResponse) GetReasonOk() (*string, bool) {
	if o == nil || o.Reason == nil {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *TestResponse) HasReason() bool {
	if o != nil && o.Reason != nil {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *TestResponse) SetReason(v string) {
	o.Reason = &v
}

// GetErrorRecords returns the ErrorRecords field value if set, zero value otherwise.
func (o *TestResponse) GetErrorRecords() []ResponseErrorRecords {
	if o == nil || o.ErrorRecords == nil {
		var ret []ResponseErrorRecords
		return ret
	}
	return o.ErrorRecords
}

// GetErrorRecordsOk returns a tuple with the ErrorRecords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestResponse) GetErrorRecordsOk() ([]ResponseErrorRecords, bool) {
	if o == nil || o.ErrorRecords == nil {
		return nil, false
	}
	return o.ErrorRecords, true
}

// HasErrorRecords returns a boolean if a field has been set.
func (o *TestResponse) HasErrorRecords() bool {
	if o != nil && o.ErrorRecords != nil {
		return true
	}

	return false
}

// SetErrorRecords gets a reference to the given []ResponseErrorRecords and assigns it to the ErrorRecords field.
func (o *TestResponse) SetErrorRecords(v []ResponseErrorRecords) {
	o.ErrorRecords = v
}

// GetWarningRecords returns the WarningRecords field value if set, zero value otherwise.
func (o *TestResponse) GetWarningRecords() []ResponseErrorRecords {
	if o == nil || o.WarningRecords == nil {
		var ret []ResponseErrorRecords
		return ret
	}
	return o.WarningRecords
}

// GetWarningRecordsOk returns a tuple with the WarningRecords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestResponse) GetWarningRecordsOk() ([]ResponseErrorRecords, bool) {
	if o == nil || o.WarningRecords == nil {
		return nil, false
	}
	return o.WarningRecords, true
}

// HasWarningRecords returns a boolean if a field has been set.
func (o *TestResponse) HasWarningRecords() bool {
	if o != nil && o.WarningRecords != nil {
		return true
	}

	return false
}

// SetWarningRecords gets a reference to the given []ResponseErrorRecords and assigns it to the WarningRecords field.
func (o *TestResponse) SetWarningRecords(v []ResponseErrorRecords) {
	o.WarningRecords = v
}

// GetValidatedFields returns the ValidatedFields field value if set, zero value otherwise.
func (o *TestResponse) GetValidatedFields() []ValidatedFields {
	if o == nil || o.ValidatedFields == nil {
		var ret []ValidatedFields
		return ret
	}
	return o.ValidatedFields
}

// GetValidatedFieldsOk returns a tuple with the ValidatedFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestResponse) GetValidatedFieldsOk() ([]ValidatedFields, bool) {
	if o == nil || o.ValidatedFields == nil {
		return nil, false
	}
	return o.ValidatedFields, true
}

// HasValidatedFields returns a boolean if a field has been set.
func (o *TestResponse) HasValidatedFields() bool {
	if o != nil && o.ValidatedFields != nil {
		return true
	}

	return false
}

// SetValidatedFields gets a reference to the given []ValidatedFields and assigns it to the ValidatedFields field.
func (o *TestResponse) SetValidatedFields(v []ValidatedFields) {
	o.ValidatedFields = v
}

func (o TestResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.Reason != nil {
		toSerialize["reason"] = o.Reason
	}
	if o.ErrorRecords != nil {
		toSerialize["error_records"] = o.ErrorRecords
	}
	if o.WarningRecords != nil {
		toSerialize["warning_records"] = o.WarningRecords
	}
	if o.ValidatedFields != nil {
		toSerialize["validated_fields"] = o.ValidatedFields
	}
	return json.Marshal(toSerialize)
}

type NullableTestResponse struct {
	value *TestResponse
	isSet bool
}

func (v NullableTestResponse) Get() *TestResponse {
	return v.value
}

func (v *NullableTestResponse) Set(val *TestResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableTestResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableTestResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestResponse(val *TestResponse) *NullableTestResponse {
	return &NullableTestResponse{value: val, isSet: true}
}

func (v NullableTestResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


